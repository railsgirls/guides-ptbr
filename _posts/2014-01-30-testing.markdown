---
layout: default
title: Melhor você checar seu app, antes de quebrá-lo
permalink: testing-rspec
---

# Teste sua aplicação com RSpec

*Criado por Clemens Helm, [@clemenshelm](https://twitter.com/clemenshelm) e Floor Drees, [@floordrees](https://twitter.com/floordrees)*

*Traduzido por Marina Limeira, [@marinalimeira_](https://www.twitter.com/marinalimeira_)*

*Atualizado por Ana Schwendler, [@anaschwendler](https://twitter.com/anaschwendler)*

**Esse guia assume que você já criou a app RailsGirls como mostrado no** [**tutorial para criação da app Rails Girls**](/app).

[RSpec](https://github.com/rspec/rspec-rails) é um framework para testes em Ruby, que descreve o comportamento da nossa aplicação em uma sintaxe que não se parece muito com Ruby. Ele irá mostrar o resultado dos testes no seu terminal, então você testará suas habilidades de leitura também.

__INSTRUTOR(A)__: Fale sobre testes e Desenvolvimento Guiado por Comportamento (Behavior Driven Development).

## *1.* Adicione a gem RSpec

Abra o seu `Gemfile` e adicione esta linha aos grupos`:development` e `:test`, acima da tag final:

{% highlight ruby %}
group :development, :test do
  ...
  gem 'rspec-rails', '~> 3.8'
end
{% endhighlight %}

e rode

{% highlight sh %}
bundle install
{% endhighlight %}

para instalar a gem.

Em seguida, rode o comando abaixo para gerar as pastas do rspec:

{% highlight sh %}
rails generate rspec:install
{% endhighlight %}

Isso adiciona os seguintes arquivos usados para configuração:

- `.rspec`
- `spec/spec_helper.rb`
- `spec/rails_helper.rb`

## *2.* Crie seu primeiro teste!

Rubystas frequentemente utilizam as palavras 'teste' e 'especificação' da mesma maneira, e é por isso que você irá armazenar seus testes no diretório 'specs'.
Para fazer isso, execute os seguintes passos:

Vamos criar um teste para o nosso modelo `idea`, para fazer isso de maneira elegante em Rails:

* Crie uma pasta `models` na sua pasta `spec`, rodando no terminal:
{% highlight sh %}
mkdir spec/models
{% endhighlight %}

* Salve seu teste como `idea_spec.rb` (`<nome_do_modelo> _spec.rb`).

Dentro desse novo arquivo, em nosso primeiro teste, queremos garantir que uma ideia tenha um nome. Para fazer isso, vamos descrever uma de nossas especificações:

{% highlight ruby %}
require "rails_helper"

RSpec.describe Idea, type: :model do
  it "tem um nome" do
    skip
  end
end
{% endhighlight %}

No seu terminal rode:

{% highlight sh %}
rspec spec/models/idea_spec.rb
{% endhighlight %}

qual será o resultado que seu teste está pendente, pois ainda não está implementado.

__INSTRUTOR(A)__: Fale sobre 'googlear' a saída do terminal

Vamos fazer algo sobre isso!

{% highlight ruby %}
require "rails_helper"

RSpec.describe Idea, type: :model do
  it "tem um nome" do # sim, você pode user 'it' (lê-se como 'isso tem um nome')
    idea = Idea.create!(name: "Minha ideia maravilhosa") # criando uma nova ideia
    expect(idea.name).to eq("Minha ideia maravilhosa") # esperamos que seja salvo com o nome correto
  end
end
{% endhighlight %}

deve gerar uma saída mais adequada.

## *3.* Refatorando

Você pode criar duas ideias, para ter certeza de que nosso projeto está criando ideias da maneira certa:

{% highlight ruby %}
require "rails_helper"

RSpec.describe Idea, type: :model do
  it "tem um nome" do # sim, você pode user 'it' (lê-se como 'isso tem um nome')
    idea = Idea.create!(name: "Minha ideia maravilhosa") # sim, você pode user 'it' (lê-se como 'isso tem um nome')
    second_idea = Idea.create!(name: "Minha segunda ideia maravilhosa") # criando uma nova ideia
    expect(second_idea.name).to eq("Minha segunda ideia maravilhosa") # esperamos que a segunda ideia seja salva corretamente
  end
end
{% endhighlight %}

que testa mais coisas.

__INSTRUTOR(A)__: Fale um pouco sobre a refatoração.

## *4.* Marcando os testes como a fazer

Sim! Listas de coisas a fazer. Maravilhoso.
Uma boa funcionalidade do RSpec é a possibilidade de marcar alguns testes como pendente. Em outras palavras, primeiro você pensa sobre o que a implementação deve realizar, em seguida, escreve um teste para verificar se está funcionando.

Vamos criar nosso próximo teste, adicionando as linhas abaixo ao nosso `idea_spec.rb`

{% highlight ruby %}
it "tem uma descricao"
{% endhighlight %}

retornará que o teste está pendente.

Você consegue completar este teste? Você consegue pensar em outros testes?

## *5.* Desenvolvimento Guiado por Comportamento (BDD)

__INSTRUTOR(A)__: Fale um pouco sobre Desenvolvimento Guiado por Comportamento (BDD).

Agora você pode criar mais testes sozinho.
Sinta-se à vontade para falar com o seu instrutor(a) para fazer isso ou maneiras de criar mais testes.

Feliz testes!

{% include other-guides.md page="testing-rspec" %}
